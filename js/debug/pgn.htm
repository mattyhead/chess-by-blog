<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	<title>Debugging pgn.js</title>

	<!-- Dependencies -->
	<script type="text/javascript" src="../../chess-js/chess.js"></script>
	<script type="text/javascript" src="../pgn.js"></script>

	<!-- Test function -->
	<script type="text/javascript">

		/**
		 * Try to parse a PGN string, and report the result.
		 */
		function testPgn(pgnString)
		{
			// Main node: the results will written in this node.
			var mainNode = document.getElementById("testPgn");

			// Write separator
			mainNode.appendChild(document.createElement("hr"));

			// Write source
			var pre = document.createElement("pre");
			pre.className = "source";
			pre.appendChild(document.createTextNode(pgnString));
			mainNode.appendChild(pre);

			// Parse the data
			try {
				pgn = Pgn.parse(pgnString);
				for(var k=0; k<pgn.length; ++k)
				{
					// Create a DOM node for each item
					var div = document.createElement("pre");
					div.className = "item";
					mainNode.appendChild(div);

					// Print the item
					printHeaders(div, pgn[k]);
					div.appendChild(document.createTextNode("\n"));
					printVariation(div, pgn[k].mainVariation(), "", "");
					div.appendChild(document.createTextNode("\n"));
					div.appendChild(document.createTextNode("Result: "+ pgn[k].result));
				}
			}

			// Catch PGN errors
			catch(error) {
				if(error instanceof Pgn.ParsingException)
				{
					var div = document.createElement("div");
					div.className = "error";
					mainNode.appendChild(div);

					var message = document.createElement("div");
					message.className = "message";
					message.appendChild(document.createTextNode(error.message));
					div.appendChild(message);

					var at = document.createElement("div");
					at.className = "at";
					at.appendChild(document.createTextNode("Error at position " + error.pos + ":"));
					div.appendChild(at);

					var ellip = document.createElement("span");
					ellip.className = "ellipsis";
					ellip.appendChild(document.createTextNode(ellipsis(error.pgnString, error.pos, 50)));
					at.appendChild(ellip);
				}

				// Other errors => re-throw them
				else {
					throw error;
				}
			}
		}

		/**
		 * Return a substring of string `s` starting at position `pos` and of length
		 * at most equal to `maxLength`. 
		 */
		function ellipsis(s, pos, maxLength)
		{
			if(s.length - pos>maxLength) {
				return s.substr(pos, maxLength) + "...";
			}
			else {
				return s.substr(pos);
			}
		}

		/**
		 * Print the headers of PGN item
		 */
		function printHeaders(dom, item)
		{
			var headers = item.headers();
			for(var k=0; k<headers.length; ++k) {
				var key  = headers[k];
				var text = key + " = [" + item.header(key) + "]";
				dom.appendChild(document.createTextNode(text + "\n"));
			}
		}

		/**
		 * Print a PGN variation
		 */
		function printVariation(dom, variation, indent, indentFirst)
		{
			// Variation header
			var text = "-+";
			if(variation.isLongVariation()) {
				text += "<LONG";
			}
			for(var k=0; k<variation.nags.length; ++k) {
				text += " $" + variation.nags[k];
			}
			if(variation.commentary!="") {
				text += " {" + variation.commentary + "}";
			}
			dom.appendChild(document.createTextNode(indentFirst + text + "\n"));

			// List of moves
			var node = variation.first();
			while(node!=null)
			{
				// Describe the move
				var text = "(" + node.moveCounter() + ") " + node.move();
				for(var k=0; k<node.nags.length; ++k) {
					text += " $" + node.nags[k];
				}
				if(node.commentary!="") {
					text += " {" + node.commentary + "}";
					if(node.isLongCommentary) {
						text += "<LONG";
					}
				}

				// Print it to the current DOM node
				dom.appendChild(document.createTextNode(indent + text + "\n"));

				// Print the sub-variations
				for(var k=0; k<node.variations(); ++k) {
					dom.appendChild(document.createTextNode(indent + " |\n"));
					printVariation(dom, node.variation(k), indent+" |  ", indent+" +--");
				}
				if(node.variations()>0) {
					dom.appendChild(document.createTextNode(indent + " |\n"));
				}

				// Go to the next move
				node = node.next();
			}
		}

	</script>

	<!-- Custom CSS elements -->
	<style type="text/css">
		.source {
			background-color: #f0f0ff;
			padding: 5px;
		}

		.item {
			background-color: #e0ffe0;
			padding: 5px;
		}

		.error {
			background-color: #ffe0e0;
			padding: 5px;
		}

		.error .message {
			font-weight: bold;
			margin-bottom: 5px;
		}

		.error .ellipsis {
			font-family: monospace;
		}

		.error .ellipsis:before {
			content: " ";
		}

	</style>
</head>

<body>
	<h1>Debugging pgn.js</h1>
	<div id="testPgn"></div>
	<script type="text/javascript">

		// Test 0 -> generate an error
		testPgn('Bad data');

		// Test 1
		testPgn(
			'[Event "Scholar\'s mate"]\n' +
			'[Site "*"]\n' +
			'[Date "2013.??.??"]\n' +
			'[Round "?"]\n' +
			'[White "Player 1"]\n' +
			'[Black "Player 2"]\n' +
			'[Result "1-0"]\n' +
			'\n' +
			'1. e4 e5 2. Bc4 Nc6 3. Qh5 Nf6 4. Qxf7# 1-0\n' +
			'\n' +
			'[Event "Quickest mate"]\n' +
			'\n' +
			'1. f4 e6 2. g4 Qh4# 0-1'
		);

		// Test 2
		testPgn(
			'[Event "Game with comments and NAGs"]\n' +
			'\n' +
			'{Let\'s start with a useless comment.}\n' +
			'1. e4 ! e6 {This opening is called the French.} 2. d4 +-\n' +
			'{   I\'m joking of course!   } *'
		);

		// Test 3
		testPgn(
			'[Event "Game with variations"]\n' +
			'\n' +
			'1.e4 e5 (1...e6 +-) 2.Nf3 Nc6 3.Bb5 ({Italian game:} 3.Bc4 Bc5)\n' +
			'(3.d4 exd4 4.Nxd4 ($42 4.Bc4 !? Nf6 inf) 4...Bc5) 3...a6 4.Bxc6 dxc6 1/2-1/2'
		);

		// Test 4
		testPgn(
			'[Event "1<sup>st</sup> American Chess Congress"]\n' +
			'[Site "New York, NY USA"]\n' +
			'[Date "1857.11.03"]\n' +
			'[Round "4.6"]\n' +
			'[White "Paulsen, Louis"]\n' +
			'[Black "Morphy, Paul"]\n' +
			'[Result "0-1"]\n' +
			'\n' +
			'1. e4 e5 2. Nf3 Nc6 3. Nc3 Nf6 4. Bb5 Bc5 5. O-O O-O 6. Nxe5 Re8 7. Nxc6 dxc6\n' +
			'8. Bc4 b5 9. Be2 Nxe4 10. Nxe4 Rxe4 11. Bf3 Re6 12. c3 Qd3 13. b4 Bb6 14. a4 bxa4\n' +
			'15. Qxa4 Bd7 16. Ra2 Rae8 17. Qa6\n' +
			'\n' +
			'{Morphy took twelve minutes over his next move, probably to assure himself ' +
			'that the combination was sound and that he had a forced win in every variation.}\n' +
			'\n' +
			'17... Qxf3 $3 18. gxf3 Rg6+ 19. Kh1 Bh3 20. Rd1' +
			'({Not} 20. Rg1 Rxg1+ 21. Kxg1 Re1+ $19)\n' +
			'20... Bg2+ 21. Kg1 Bxf3+ 22. Kf1 Bg2+\n' +
			'\n' +
			'(22...Rg2 $1 {would have won more quickly. For instance:} 23. Qd3 Rxf2+ 24. Kg1 Rg2+ 25. Kh1 Rg1#)\n' +
			'\n' +
			'23. Kg1 Bh3+ 24. Kh1 Bxf2 25. Qf1 {Absolutely forced.} 25... Bxf1 26. Rxf1 Re2\n' +
			'27. Ra1 Rh6 28. d4 Be3 0-1'
		);

		// Test 5
		testPgn(
			'[Result "*"]\n' +
			'[Annotator "gokhan007"]\n' +
			'[FEN "r2q1b1r/ppn2kpp/2p1b3/3nP3/2BPQ3/P1N5/1PP3PP/R1B1K2R w KQ - 1 14"]\n' +
			'[SetUp "1"]\n' +
			'14. O-O+ Ke8 *'
		);

	</script>
</body>

</html>
